<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.project.easyTeaching.dao.CourseMapper">
  <resultMap id="BaseResultMap" type="team.project.easyTeaching.pojo.Course">
    <constructor>
      <idArg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="course_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="course_desc" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="term_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    course_id, course_name, course_desc, term_id, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_course
    where course_id = #{courseId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_course
    where course_id = #{courseId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="team.project.easyTeaching.pojo.Course">
    insert into tb_course (course_id, course_name, course_desc, 
      term_id, create_time, update_time
      )
    values (#{courseId,jdbcType=INTEGER}, #{courseName,jdbcType=VARCHAR}, #{courseDesc,jdbcType=VARCHAR}, 
      #{termId,jdbcType=INTEGER}, now(), now()
      )
  </insert>
  <insert id="insertSelective" parameterType="team.project.easyTeaching.pojo.Course">
    insert into tb_course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        course_id,
      </if>
      <if test="courseName != null">
        course_name,
      </if>
      <if test="courseDesc != null">
        course_desc,
      </if>
      <if test="termId != null">
        term_id,
      </if>
        create_time,
        update_time,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseName != null">
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseDesc != null">
        #{courseDesc,jdbcType=VARCHAR},
      </if>
      <if test="termId != null">
        #{termId,jdbcType=INTEGER},
      </if>
        now(),
        now(),
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="team.project.easyTeaching.pojo.Course">
    update tb_course
    <set>
      <if test="courseName != null">
        course_name = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseDesc != null">
        course_desc = #{courseDesc,jdbcType=VARCHAR},
      </if>
      <if test="termId != null">
        term_id = #{termId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
        now(),
    </set>
    where course_id = #{courseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="team.project.easyTeaching.pojo.Course">
    update tb_course
    set course_name = #{courseName,jdbcType=VARCHAR},
      course_desc = #{courseDesc,jdbcType=VARCHAR},
      term_id = #{termId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where course_id = #{courseId,jdbcType=INTEGER}
  </update>

  <select id="selectByTermId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_course
    where term_id = #{termId,jdbcType=INTEGER}
    order by create_time desc
  </select>

  <select id="selectByTermIdList" parameterType="java.util.List" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_course
    where term_id in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
    order by create_time desc
  </select>


</mapper>